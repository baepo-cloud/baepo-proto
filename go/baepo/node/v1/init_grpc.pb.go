// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: baepo/node/v1/init.proto

package nodev1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Init_GetLogs_FullMethodName = "/baepo.node.v1.Init/GetLogs"
	Init_Events_FullMethodName  = "/baepo.node.v1.Init/Events"
)

// InitClient is the client API for Init service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitClient interface {
	GetLogs(ctx context.Context, in *InitGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitGetLogsResponse], error)
	Events(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitEventsResponse], error)
}

type initClient struct {
	cc grpc.ClientConnInterface
}

func NewInitClient(cc grpc.ClientConnInterface) InitClient {
	return &initClient{cc}
}

func (c *initClient) GetLogs(ctx context.Context, in *InitGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitGetLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Init_ServiceDesc.Streams[0], Init_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InitGetLogsRequest, InitGetLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Init_GetLogsClient = grpc.ServerStreamingClient[InitGetLogsResponse]

func (c *initClient) Events(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InitEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Init_ServiceDesc.Streams[1], Init_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, InitEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Init_EventsClient = grpc.ServerStreamingClient[InitEventsResponse]

// InitServer is the server API for Init service.
// All implementations must embed UnimplementedInitServer
// for forward compatibility.
type InitServer interface {
	GetLogs(*InitGetLogsRequest, grpc.ServerStreamingServer[InitGetLogsResponse]) error
	Events(*emptypb.Empty, grpc.ServerStreamingServer[InitEventsResponse]) error
	mustEmbedUnimplementedInitServer()
}

// UnimplementedInitServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInitServer struct{}

func (UnimplementedInitServer) GetLogs(*InitGetLogsRequest, grpc.ServerStreamingServer[InitGetLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedInitServer) Events(*emptypb.Empty, grpc.ServerStreamingServer[InitEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedInitServer) mustEmbedUnimplementedInitServer() {}
func (UnimplementedInitServer) testEmbeddedByValue()              {}

// UnsafeInitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitServer will
// result in compilation errors.
type UnsafeInitServer interface {
	mustEmbedUnimplementedInitServer()
}

func RegisterInitServer(s grpc.ServiceRegistrar, srv InitServer) {
	// If the following call pancis, it indicates UnimplementedInitServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Init_ServiceDesc, srv)
}

func _Init_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitGetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InitServer).GetLogs(m, &grpc.GenericServerStream[InitGetLogsRequest, InitGetLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Init_GetLogsServer = grpc.ServerStreamingServer[InitGetLogsResponse]

func _Init_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InitServer).Events(m, &grpc.GenericServerStream[emptypb.Empty, InitEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Init_EventsServer = grpc.ServerStreamingServer[InitEventsResponse]

// Init_ServiceDesc is the grpc.ServiceDesc for Init service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Init_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baepo.node.v1.Init",
	HandlerType: (*InitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _Init_GetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _Init_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "baepo/node/v1/init.proto",
}
