// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: baepo/node/v1/runtime.proto

package nodev1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Runtime_GetLogs_FullMethodName          = "/baepo.node.v1.Runtime/GetLogs"
	Runtime_GetContainerLogs_FullMethodName = "/baepo.node.v1.Runtime/GetContainerLogs"
	Runtime_Events_FullMethodName           = "/baepo.node.v1.Runtime/Events"
	Runtime_Terminate_FullMethodName        = "/baepo.node.v1.Runtime/Terminate"
)

// RuntimeClient is the client API for Runtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeClient interface {
	GetLogs(ctx context.Context, in *RuntimeGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeGetLogsResponse], error)
	GetContainerLogs(ctx context.Context, in *RuntimeGetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeGetContainerLogsResponse], error)
	Events(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeEventsResponse], error)
	Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type runtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeClient(cc grpc.ClientConnInterface) RuntimeClient {
	return &runtimeClient{cc}
}

func (c *runtimeClient) GetLogs(ctx context.Context, in *RuntimeGetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeGetLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runtime_ServiceDesc.Streams[0], Runtime_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RuntimeGetLogsRequest, RuntimeGetLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_GetLogsClient = grpc.ServerStreamingClient[RuntimeGetLogsResponse]

func (c *runtimeClient) GetContainerLogs(ctx context.Context, in *RuntimeGetContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeGetContainerLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runtime_ServiceDesc.Streams[1], Runtime_GetContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RuntimeGetContainerLogsRequest, RuntimeGetContainerLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_GetContainerLogsClient = grpc.ServerStreamingClient[RuntimeGetContainerLogsResponse]

func (c *runtimeClient) Events(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RuntimeEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runtime_ServiceDesc.Streams[2], Runtime_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, RuntimeEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_EventsClient = grpc.ServerStreamingClient[RuntimeEventsResponse]

func (c *runtimeClient) Terminate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Runtime_Terminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServer is the server API for Runtime service.
// All implementations must embed UnimplementedRuntimeServer
// for forward compatibility.
type RuntimeServer interface {
	GetLogs(*RuntimeGetLogsRequest, grpc.ServerStreamingServer[RuntimeGetLogsResponse]) error
	GetContainerLogs(*RuntimeGetContainerLogsRequest, grpc.ServerStreamingServer[RuntimeGetContainerLogsResponse]) error
	Events(*emptypb.Empty, grpc.ServerStreamingServer[RuntimeEventsResponse]) error
	Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRuntimeServer()
}

// UnimplementedRuntimeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeServer struct{}

func (UnimplementedRuntimeServer) GetLogs(*RuntimeGetLogsRequest, grpc.ServerStreamingServer[RuntimeGetLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedRuntimeServer) GetContainerLogs(*RuntimeGetContainerLogsRequest, grpc.ServerStreamingServer[RuntimeGetContainerLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetContainerLogs not implemented")
}
func (UnimplementedRuntimeServer) Events(*emptypb.Empty, grpc.ServerStreamingServer[RuntimeEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedRuntimeServer) Terminate(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedRuntimeServer) mustEmbedUnimplementedRuntimeServer() {}
func (UnimplementedRuntimeServer) testEmbeddedByValue()                 {}

// UnsafeRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServer will
// result in compilation errors.
type UnsafeRuntimeServer interface {
	mustEmbedUnimplementedRuntimeServer()
}

func RegisterRuntimeServer(s grpc.ServiceRegistrar, srv RuntimeServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Runtime_ServiceDesc, srv)
}

func _Runtime_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RuntimeGetLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).GetLogs(m, &grpc.GenericServerStream[RuntimeGetLogsRequest, RuntimeGetLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_GetLogsServer = grpc.ServerStreamingServer[RuntimeGetLogsResponse]

func _Runtime_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RuntimeGetContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).GetContainerLogs(m, &grpc.GenericServerStream[RuntimeGetContainerLogsRequest, RuntimeGetContainerLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_GetContainerLogsServer = grpc.ServerStreamingServer[RuntimeGetContainerLogsResponse]

func _Runtime_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServer).Events(m, &grpc.GenericServerStream[emptypb.Empty, RuntimeEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runtime_EventsServer = grpc.ServerStreamingServer[RuntimeEventsResponse]

func _Runtime_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runtime_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServer).Terminate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Runtime_ServiceDesc is the grpc.ServiceDesc for Runtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baepo.node.v1.Runtime",
	HandlerType: (*RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Terminate",
			Handler:    _Runtime_Terminate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogs",
			Handler:       _Runtime_GetLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerLogs",
			Handler:       _Runtime_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _Runtime_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "baepo/node/v1/runtime.proto",
}
