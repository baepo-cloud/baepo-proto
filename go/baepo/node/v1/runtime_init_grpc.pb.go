// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: baepo/node/v1/runtime_init.proto

package nodev1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuntimeInit_WriteLog_FullMethodName             = "/baepo.node.v1.RuntimeInit/WriteLog"
	RuntimeInit_UpdateContainerState_FullMethodName = "/baepo.node.v1.RuntimeInit/UpdateContainerState"
)

// RuntimeInitClient is the client API for RuntimeInit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeInitClient interface {
	WriteLog(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RuntimeInitWriteLogRequest, emptypb.Empty], error)
	UpdateContainerState(ctx context.Context, in *RuntimeInitUpdateContainerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type runtimeInitClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeInitClient(cc grpc.ClientConnInterface) RuntimeInitClient {
	return &runtimeInitClient{cc}
}

func (c *runtimeInitClient) WriteLog(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RuntimeInitWriteLogRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RuntimeInit_ServiceDesc.Streams[0], RuntimeInit_WriteLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RuntimeInitWriteLogRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeInit_WriteLogClient = grpc.BidiStreamingClient[RuntimeInitWriteLogRequest, emptypb.Empty]

func (c *runtimeInitClient) UpdateContainerState(ctx context.Context, in *RuntimeInitUpdateContainerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RuntimeInit_UpdateContainerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeInitServer is the server API for RuntimeInit service.
// All implementations must embed UnimplementedRuntimeInitServer
// for forward compatibility.
type RuntimeInitServer interface {
	WriteLog(grpc.BidiStreamingServer[RuntimeInitWriteLogRequest, emptypb.Empty]) error
	UpdateContainerState(context.Context, *RuntimeInitUpdateContainerStateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRuntimeInitServer()
}

// UnimplementedRuntimeInitServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeInitServer struct{}

func (UnimplementedRuntimeInitServer) WriteLog(grpc.BidiStreamingServer[RuntimeInitWriteLogRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}
func (UnimplementedRuntimeInitServer) UpdateContainerState(context.Context, *RuntimeInitUpdateContainerStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContainerState not implemented")
}
func (UnimplementedRuntimeInitServer) mustEmbedUnimplementedRuntimeInitServer() {}
func (UnimplementedRuntimeInitServer) testEmbeddedByValue()                     {}

// UnsafeRuntimeInitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeInitServer will
// result in compilation errors.
type UnsafeRuntimeInitServer interface {
	mustEmbedUnimplementedRuntimeInitServer()
}

func RegisterRuntimeInitServer(s grpc.ServiceRegistrar, srv RuntimeInitServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeInitServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuntimeInit_ServiceDesc, srv)
}

func _RuntimeInit_WriteLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RuntimeInitServer).WriteLog(&grpc.GenericServerStream[RuntimeInitWriteLogRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RuntimeInit_WriteLogServer = grpc.BidiStreamingServer[RuntimeInitWriteLogRequest, emptypb.Empty]

func _RuntimeInit_UpdateContainerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuntimeInitUpdateContainerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeInitServer).UpdateContainerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeInit_UpdateContainerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeInitServer).UpdateContainerState(ctx, req.(*RuntimeInitUpdateContainerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeInit_ServiceDesc is the grpc.ServiceDesc for RuntimeInit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeInit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baepo.node.v1.RuntimeInit",
	HandlerType: (*RuntimeInitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateContainerState",
			Handler:    _RuntimeInit_UpdateContainerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteLog",
			Handler:       _RuntimeInit_WriteLog_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "baepo/node/v1/runtime_init.proto",
}
