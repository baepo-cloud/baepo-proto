// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/node/v1/node.proto

package nodev1pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/node/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeServiceName is the fully-qualified name of the NodeService service.
	NodeServiceName = "baepo.node.v1.NodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeServiceListMachinesProcedure is the fully-qualified name of the NodeService's ListMachines
	// RPC.
	NodeServiceListMachinesProcedure = "/baepo.node.v1.NodeService/ListMachines"
	// NodeServiceGetMachineProcedure is the fully-qualified name of the NodeService's GetMachine RPC.
	NodeServiceGetMachineProcedure = "/baepo.node.v1.NodeService/GetMachine"
	// NodeServiceGetMachineLogsProcedure is the fully-qualified name of the NodeService's
	// GetMachineLogs RPC.
	NodeServiceGetMachineLogsProcedure = "/baepo.node.v1.NodeService/GetMachineLogs"
)

// NodeServiceClient is a client for the baepo.node.v1.NodeService service.
type NodeServiceClient interface {
	ListMachines(context.Context, *connect.Request[v1.NodeListMachinesRequest]) (*connect.Response[v1.NodeListMachinesResponse], error)
	GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error)
	GetMachineLogs(context.Context, *connect.Request[v1.NodeGetMachineLogsRequest]) (*connect.ServerStreamForClient[v1.NodeGetMachineLogsResponse], error)
}

// NewNodeServiceClient constructs a client for the baepo.node.v1.NodeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeServiceMethods := v1.File_baepo_node_v1_node_proto.Services().ByName("NodeService").Methods()
	return &nodeServiceClient{
		listMachines: connect.NewClient[v1.NodeListMachinesRequest, v1.NodeListMachinesResponse](
			httpClient,
			baseURL+NodeServiceListMachinesProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("ListMachines")),
			connect.WithClientOptions(opts...),
		),
		getMachine: connect.NewClient[v1.NodeGetMachineRequest, v1.NodeGetMachineResponse](
			httpClient,
			baseURL+NodeServiceGetMachineProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("GetMachine")),
			connect.WithClientOptions(opts...),
		),
		getMachineLogs: connect.NewClient[v1.NodeGetMachineLogsRequest, v1.NodeGetMachineLogsResponse](
			httpClient,
			baseURL+NodeServiceGetMachineLogsProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("GetMachineLogs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeServiceClient implements NodeServiceClient.
type nodeServiceClient struct {
	listMachines   *connect.Client[v1.NodeListMachinesRequest, v1.NodeListMachinesResponse]
	getMachine     *connect.Client[v1.NodeGetMachineRequest, v1.NodeGetMachineResponse]
	getMachineLogs *connect.Client[v1.NodeGetMachineLogsRequest, v1.NodeGetMachineLogsResponse]
}

// ListMachines calls baepo.node.v1.NodeService.ListMachines.
func (c *nodeServiceClient) ListMachines(ctx context.Context, req *connect.Request[v1.NodeListMachinesRequest]) (*connect.Response[v1.NodeListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// GetMachine calls baepo.node.v1.NodeService.GetMachine.
func (c *nodeServiceClient) GetMachine(ctx context.Context, req *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error) {
	return c.getMachine.CallUnary(ctx, req)
}

// GetMachineLogs calls baepo.node.v1.NodeService.GetMachineLogs.
func (c *nodeServiceClient) GetMachineLogs(ctx context.Context, req *connect.Request[v1.NodeGetMachineLogsRequest]) (*connect.ServerStreamForClient[v1.NodeGetMachineLogsResponse], error) {
	return c.getMachineLogs.CallServerStream(ctx, req)
}

// NodeServiceHandler is an implementation of the baepo.node.v1.NodeService service.
type NodeServiceHandler interface {
	ListMachines(context.Context, *connect.Request[v1.NodeListMachinesRequest]) (*connect.Response[v1.NodeListMachinesResponse], error)
	GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error)
	GetMachineLogs(context.Context, *connect.Request[v1.NodeGetMachineLogsRequest], *connect.ServerStream[v1.NodeGetMachineLogsResponse]) error
}

// NewNodeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeServiceHandler(svc NodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeServiceMethods := v1.File_baepo_node_v1_node_proto.Services().ByName("NodeService").Methods()
	nodeServiceListMachinesHandler := connect.NewUnaryHandler(
		NodeServiceListMachinesProcedure,
		svc.ListMachines,
		connect.WithSchema(nodeServiceMethods.ByName("ListMachines")),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceGetMachineHandler := connect.NewUnaryHandler(
		NodeServiceGetMachineProcedure,
		svc.GetMachine,
		connect.WithSchema(nodeServiceMethods.ByName("GetMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceGetMachineLogsHandler := connect.NewServerStreamHandler(
		NodeServiceGetMachineLogsProcedure,
		svc.GetMachineLogs,
		connect.WithSchema(nodeServiceMethods.ByName("GetMachineLogs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.node.v1.NodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeServiceListMachinesProcedure:
			nodeServiceListMachinesHandler.ServeHTTP(w, r)
		case NodeServiceGetMachineProcedure:
			nodeServiceGetMachineHandler.ServeHTTP(w, r)
		case NodeServiceGetMachineLogsProcedure:
			nodeServiceGetMachineLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeServiceHandler struct{}

func (UnimplementedNodeServiceHandler) ListMachines(context.Context, *connect.Request[v1.NodeListMachinesRequest]) (*connect.Response[v1.NodeListMachinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.ListMachines is not implemented"))
}

func (UnimplementedNodeServiceHandler) GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.GetMachine is not implemented"))
}

func (UnimplementedNodeServiceHandler) GetMachineLogs(context.Context, *connect.Request[v1.NodeGetMachineLogsRequest], *connect.ServerStream[v1.NodeGetMachineLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.GetMachineLogs is not implemented"))
}
