// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/node/v1/init.proto

package nodev1pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/node/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InitName is the fully-qualified name of the Init service.
	InitName = "baepo.node.v1.Init"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InitGetLogsProcedure is the fully-qualified name of the Init's GetLogs RPC.
	InitGetLogsProcedure = "/baepo.node.v1.Init/GetLogs"
	// InitEventsProcedure is the fully-qualified name of the Init's Events RPC.
	InitEventsProcedure = "/baepo.node.v1.Init/Events"
)

// InitClient is a client for the baepo.node.v1.Init service.
type InitClient interface {
	GetLogs(context.Context, *connect.Request[v1.InitGetLogsRequest]) (*connect.ServerStreamForClient[v1.InitGetLogsResponse], error)
	Events(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[v1.InitEventsResponse], error)
}

// NewInitClient constructs a client for the baepo.node.v1.Init service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInitClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InitClient {
	baseURL = strings.TrimRight(baseURL, "/")
	initMethods := v1.File_baepo_node_v1_init_proto.Services().ByName("Init").Methods()
	return &initClient{
		getLogs: connect.NewClient[v1.InitGetLogsRequest, v1.InitGetLogsResponse](
			httpClient,
			baseURL+InitGetLogsProcedure,
			connect.WithSchema(initMethods.ByName("GetLogs")),
			connect.WithClientOptions(opts...),
		),
		events: connect.NewClient[emptypb.Empty, v1.InitEventsResponse](
			httpClient,
			baseURL+InitEventsProcedure,
			connect.WithSchema(initMethods.ByName("Events")),
			connect.WithClientOptions(opts...),
		),
	}
}

// initClient implements InitClient.
type initClient struct {
	getLogs *connect.Client[v1.InitGetLogsRequest, v1.InitGetLogsResponse]
	events  *connect.Client[emptypb.Empty, v1.InitEventsResponse]
}

// GetLogs calls baepo.node.v1.Init.GetLogs.
func (c *initClient) GetLogs(ctx context.Context, req *connect.Request[v1.InitGetLogsRequest]) (*connect.ServerStreamForClient[v1.InitGetLogsResponse], error) {
	return c.getLogs.CallServerStream(ctx, req)
}

// Events calls baepo.node.v1.Init.Events.
func (c *initClient) Events(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[v1.InitEventsResponse], error) {
	return c.events.CallServerStream(ctx, req)
}

// InitHandler is an implementation of the baepo.node.v1.Init service.
type InitHandler interface {
	GetLogs(context.Context, *connect.Request[v1.InitGetLogsRequest], *connect.ServerStream[v1.InitGetLogsResponse]) error
	Events(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[v1.InitEventsResponse]) error
}

// NewInitHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInitHandler(svc InitHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	initMethods := v1.File_baepo_node_v1_init_proto.Services().ByName("Init").Methods()
	initGetLogsHandler := connect.NewServerStreamHandler(
		InitGetLogsProcedure,
		svc.GetLogs,
		connect.WithSchema(initMethods.ByName("GetLogs")),
		connect.WithHandlerOptions(opts...),
	)
	initEventsHandler := connect.NewServerStreamHandler(
		InitEventsProcedure,
		svc.Events,
		connect.WithSchema(initMethods.ByName("Events")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.node.v1.Init/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InitGetLogsProcedure:
			initGetLogsHandler.ServeHTTP(w, r)
		case InitEventsProcedure:
			initEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInitHandler returns CodeUnimplemented from all methods.
type UnimplementedInitHandler struct{}

func (UnimplementedInitHandler) GetLogs(context.Context, *connect.Request[v1.InitGetLogsRequest], *connect.ServerStream[v1.InitGetLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.Init.GetLogs is not implemented"))
}

func (UnimplementedInitHandler) Events(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[v1.InitEventsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.Init.Events is not implemented"))
}
