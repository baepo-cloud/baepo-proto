// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/node/v1/node.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/node/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeServiceName is the fully-qualified name of the NodeService service.
	NodeServiceName = "baepo.node.v1.NodeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeServiceStartMachineProcedure is the fully-qualified name of the NodeService's StartMachine
	// RPC.
	NodeServiceStartMachineProcedure = "/baepo.node.v1.NodeService/StartMachine"
	// NodeServiceStopMachineProcedure is the fully-qualified name of the NodeService's StopMachine RPC.
	NodeServiceStopMachineProcedure = "/baepo.node.v1.NodeService/StopMachine"
	// NodeServiceGetMachineProcedure is the fully-qualified name of the NodeService's GetMachine RPC.
	NodeServiceGetMachineProcedure = "/baepo.node.v1.NodeService/GetMachine"
)

// NodeServiceClient is a client for the baepo.node.v1.NodeService service.
type NodeServiceClient interface {
	StartMachine(context.Context, *connect.Request[v1.NodeStartMachineRequest]) (*connect.Response[v1.NodeStartMachineResponse], error)
	StopMachine(context.Context, *connect.Request[v1.NodeStopMachineRequest]) (*connect.Response[emptypb.Empty], error)
	GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error)
}

// NewNodeServiceClient constructs a client for the baepo.node.v1.NodeService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeServiceMethods := v1.File_baepo_node_v1_node_proto.Services().ByName("NodeService").Methods()
	return &nodeServiceClient{
		startMachine: connect.NewClient[v1.NodeStartMachineRequest, v1.NodeStartMachineResponse](
			httpClient,
			baseURL+NodeServiceStartMachineProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("StartMachine")),
			connect.WithClientOptions(opts...),
		),
		stopMachine: connect.NewClient[v1.NodeStopMachineRequest, emptypb.Empty](
			httpClient,
			baseURL+NodeServiceStopMachineProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("StopMachine")),
			connect.WithClientOptions(opts...),
		),
		getMachine: connect.NewClient[v1.NodeGetMachineRequest, v1.NodeGetMachineResponse](
			httpClient,
			baseURL+NodeServiceGetMachineProcedure,
			connect.WithSchema(nodeServiceMethods.ByName("GetMachine")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeServiceClient implements NodeServiceClient.
type nodeServiceClient struct {
	startMachine *connect.Client[v1.NodeStartMachineRequest, v1.NodeStartMachineResponse]
	stopMachine  *connect.Client[v1.NodeStopMachineRequest, emptypb.Empty]
	getMachine   *connect.Client[v1.NodeGetMachineRequest, v1.NodeGetMachineResponse]
}

// StartMachine calls baepo.node.v1.NodeService.StartMachine.
func (c *nodeServiceClient) StartMachine(ctx context.Context, req *connect.Request[v1.NodeStartMachineRequest]) (*connect.Response[v1.NodeStartMachineResponse], error) {
	return c.startMachine.CallUnary(ctx, req)
}

// StopMachine calls baepo.node.v1.NodeService.StopMachine.
func (c *nodeServiceClient) StopMachine(ctx context.Context, req *connect.Request[v1.NodeStopMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.stopMachine.CallUnary(ctx, req)
}

// GetMachine calls baepo.node.v1.NodeService.GetMachine.
func (c *nodeServiceClient) GetMachine(ctx context.Context, req *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error) {
	return c.getMachine.CallUnary(ctx, req)
}

// NodeServiceHandler is an implementation of the baepo.node.v1.NodeService service.
type NodeServiceHandler interface {
	StartMachine(context.Context, *connect.Request[v1.NodeStartMachineRequest]) (*connect.Response[v1.NodeStartMachineResponse], error)
	StopMachine(context.Context, *connect.Request[v1.NodeStopMachineRequest]) (*connect.Response[emptypb.Empty], error)
	GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error)
}

// NewNodeServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeServiceHandler(svc NodeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeServiceMethods := v1.File_baepo_node_v1_node_proto.Services().ByName("NodeService").Methods()
	nodeServiceStartMachineHandler := connect.NewUnaryHandler(
		NodeServiceStartMachineProcedure,
		svc.StartMachine,
		connect.WithSchema(nodeServiceMethods.ByName("StartMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceStopMachineHandler := connect.NewUnaryHandler(
		NodeServiceStopMachineProcedure,
		svc.StopMachine,
		connect.WithSchema(nodeServiceMethods.ByName("StopMachine")),
		connect.WithHandlerOptions(opts...),
	)
	nodeServiceGetMachineHandler := connect.NewUnaryHandler(
		NodeServiceGetMachineProcedure,
		svc.GetMachine,
		connect.WithSchema(nodeServiceMethods.ByName("GetMachine")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.node.v1.NodeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeServiceStartMachineProcedure:
			nodeServiceStartMachineHandler.ServeHTTP(w, r)
		case NodeServiceStopMachineProcedure:
			nodeServiceStopMachineHandler.ServeHTTP(w, r)
		case NodeServiceGetMachineProcedure:
			nodeServiceGetMachineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeServiceHandler struct{}

func (UnimplementedNodeServiceHandler) StartMachine(context.Context, *connect.Request[v1.NodeStartMachineRequest]) (*connect.Response[v1.NodeStartMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.StartMachine is not implemented"))
}

func (UnimplementedNodeServiceHandler) StopMachine(context.Context, *connect.Request[v1.NodeStopMachineRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.StopMachine is not implemented"))
}

func (UnimplementedNodeServiceHandler) GetMachine(context.Context, *connect.Request[v1.NodeGetMachineRequest]) (*connect.Response[v1.NodeGetMachineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.node.v1.NodeService.GetMachine is not implemented"))
}
