// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/initd/v1/initd.proto

package initdv1pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/initd/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InitDName is the fully-qualified name of the InitD service.
	InitDName = "baepo.initd.v1.InitD"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InitDHealthcheckProcedure is the fully-qualified name of the InitD's Healthcheck RPC.
	InitDHealthcheckProcedure = "/baepo.initd.v1.InitD/Healthcheck"
)

// InitDClient is a client for the baepo.initd.v1.InitD service.
type InitDClient interface {
	Healthcheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewInitDClient constructs a client for the baepo.initd.v1.InitD service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInitDClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InitDClient {
	baseURL = strings.TrimRight(baseURL, "/")
	initDMethods := v1.File_baepo_initd_v1_initd_proto.Services().ByName("InitD").Methods()
	return &initDClient{
		healthcheck: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+InitDHealthcheckProcedure,
			connect.WithSchema(initDMethods.ByName("Healthcheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// initDClient implements InitDClient.
type initDClient struct {
	healthcheck *connect.Client[emptypb.Empty, emptypb.Empty]
}

// Healthcheck calls baepo.initd.v1.InitD.Healthcheck.
func (c *initDClient) Healthcheck(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.healthcheck.CallUnary(ctx, req)
}

// InitDHandler is an implementation of the baepo.initd.v1.InitD service.
type InitDHandler interface {
	Healthcheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewInitDHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInitDHandler(svc InitDHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	initDMethods := v1.File_baepo_initd_v1_initd_proto.Services().ByName("InitD").Methods()
	initDHealthcheckHandler := connect.NewUnaryHandler(
		InitDHealthcheckProcedure,
		svc.Healthcheck,
		connect.WithSchema(initDMethods.ByName("Healthcheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.initd.v1.InitD/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InitDHealthcheckProcedure:
			initDHealthcheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInitDHandler returns CodeUnimplemented from all methods.
type UnimplementedInitDHandler struct{}

func (UnimplementedInitDHandler) Healthcheck(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.initd.v1.InitD.Healthcheck is not implemented"))
}
