// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: baepo/api/v1/machine.proto

package apiv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MachineService_List_FullMethodName      = "/baepo.api.v1.MachineService/List"
	MachineService_FindById_FullMethodName  = "/baepo.api.v1.MachineService/FindById"
	MachineService_Create_FullMethodName    = "/baepo.api.v1.MachineService/Create"
	MachineService_Start_FullMethodName     = "/baepo.api.v1.MachineService/Start"
	MachineService_Terminate_FullMethodName = "/baepo.api.v1.MachineService/Terminate"
	MachineService_Logs_FullMethodName      = "/baepo.api.v1.MachineService/Logs"
)

// MachineServiceClient is the client API for MachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineServiceClient interface {
	List(ctx context.Context, in *MachineListRequest, opts ...grpc.CallOption) (*MachineListResponse, error)
	FindById(ctx context.Context, in *MachineFindByIdRequest, opts ...grpc.CallOption) (*MachineFindByIdResponse, error)
	Create(ctx context.Context, in *MachineCreateRequest, opts ...grpc.CallOption) (*MachineCreateResponse, error)
	Start(ctx context.Context, in *MachineStartRequest, opts ...grpc.CallOption) (*MachineStartResponse, error)
	Terminate(ctx context.Context, in *MachineTerminateRequest, opts ...grpc.CallOption) (*MachineTerminateResponse, error)
	Logs(ctx context.Context, in *MachineLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MachineLogsResponse], error)
}

type machineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineServiceClient(cc grpc.ClientConnInterface) MachineServiceClient {
	return &machineServiceClient{cc}
}

func (c *machineServiceClient) List(ctx context.Context, in *MachineListRequest, opts ...grpc.CallOption) (*MachineListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineListResponse)
	err := c.cc.Invoke(ctx, MachineService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) FindById(ctx context.Context, in *MachineFindByIdRequest, opts ...grpc.CallOption) (*MachineFindByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineFindByIdResponse)
	err := c.cc.Invoke(ctx, MachineService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Create(ctx context.Context, in *MachineCreateRequest, opts ...grpc.CallOption) (*MachineCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineCreateResponse)
	err := c.cc.Invoke(ctx, MachineService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Start(ctx context.Context, in *MachineStartRequest, opts ...grpc.CallOption) (*MachineStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineStartResponse)
	err := c.cc.Invoke(ctx, MachineService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Terminate(ctx context.Context, in *MachineTerminateRequest, opts ...grpc.CallOption) (*MachineTerminateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineTerminateResponse)
	err := c.cc.Invoke(ctx, MachineService_Terminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineServiceClient) Logs(ctx context.Context, in *MachineLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MachineLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MachineService_ServiceDesc.Streams[0], MachineService_Logs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MachineLogsRequest, MachineLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MachineService_LogsClient = grpc.ServerStreamingClient[MachineLogsResponse]

// MachineServiceServer is the server API for MachineService service.
// All implementations must embed UnimplementedMachineServiceServer
// for forward compatibility.
type MachineServiceServer interface {
	List(context.Context, *MachineListRequest) (*MachineListResponse, error)
	FindById(context.Context, *MachineFindByIdRequest) (*MachineFindByIdResponse, error)
	Create(context.Context, *MachineCreateRequest) (*MachineCreateResponse, error)
	Start(context.Context, *MachineStartRequest) (*MachineStartResponse, error)
	Terminate(context.Context, *MachineTerminateRequest) (*MachineTerminateResponse, error)
	Logs(*MachineLogsRequest, grpc.ServerStreamingServer[MachineLogsResponse]) error
	mustEmbedUnimplementedMachineServiceServer()
}

// UnimplementedMachineServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMachineServiceServer struct{}

func (UnimplementedMachineServiceServer) List(context.Context, *MachineListRequest) (*MachineListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMachineServiceServer) FindById(context.Context, *MachineFindByIdRequest) (*MachineFindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMachineServiceServer) Create(context.Context, *MachineCreateRequest) (*MachineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMachineServiceServer) Start(context.Context, *MachineStartRequest) (*MachineStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedMachineServiceServer) Terminate(context.Context, *MachineTerminateRequest) (*MachineTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedMachineServiceServer) Logs(*MachineLogsRequest, grpc.ServerStreamingServer[MachineLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedMachineServiceServer) mustEmbedUnimplementedMachineServiceServer() {}
func (UnimplementedMachineServiceServer) testEmbeddedByValue()                        {}

// UnsafeMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineServiceServer will
// result in compilation errors.
type UnsafeMachineServiceServer interface {
	mustEmbedUnimplementedMachineServiceServer()
}

func RegisterMachineServiceServer(s grpc.ServiceRegistrar, srv MachineServiceServer) {
	// If the following call pancis, it indicates UnimplementedMachineServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MachineService_ServiceDesc, srv)
}

func _MachineService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).List(ctx, req.(*MachineListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineFindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).FindById(ctx, req.(*MachineFindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Create(ctx, req.(*MachineCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Start(ctx, req.(*MachineStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MachineService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServiceServer).Terminate(ctx, req.(*MachineTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineService_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MachineLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MachineServiceServer).Logs(m, &grpc.GenericServerStream[MachineLogsRequest, MachineLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MachineService_LogsServer = grpc.ServerStreamingServer[MachineLogsResponse]

// MachineService_ServiceDesc is the grpc.ServiceDesc for MachineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MachineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baepo.api.v1.MachineService",
	HandlerType: (*MachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MachineService_List_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MachineService_FindById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MachineService_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _MachineService_Start_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _MachineService_Terminate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _MachineService_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "baepo/api/v1/machine.proto",
}
