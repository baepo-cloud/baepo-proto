// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/api/v1/node_controller.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeControllerServiceName is the fully-qualified name of the NodeControllerService service.
	NodeControllerServiceName = "baepo.api.v1.NodeControllerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeControllerServiceConnectProcedure is the fully-qualified name of the NodeControllerService's
	// Connect RPC.
	NodeControllerServiceConnectProcedure = "/baepo.api.v1.NodeControllerService/Connect"
)

// NodeControllerServiceClient is a client for the baepo.api.v1.NodeControllerService service.
type NodeControllerServiceClient interface {
	Connect(context.Context) *connect.BidiStreamForClient[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent]
}

// NewNodeControllerServiceClient constructs a client for the baepo.api.v1.NodeControllerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeControllerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeControllerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeControllerServiceMethods := v1.File_baepo_api_v1_node_controller_proto.Services().ByName("NodeControllerService").Methods()
	return &nodeControllerServiceClient{
		connect: connect.NewClient[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent](
			httpClient,
			baseURL+NodeControllerServiceConnectProcedure,
			connect.WithSchema(nodeControllerServiceMethods.ByName("Connect")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeControllerServiceClient implements NodeControllerServiceClient.
type nodeControllerServiceClient struct {
	connect *connect.Client[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent]
}

// Connect calls baepo.api.v1.NodeControllerService.Connect.
func (c *nodeControllerServiceClient) Connect(ctx context.Context) *connect.BidiStreamForClient[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent] {
	return c.connect.CallBidiStream(ctx)
}

// NodeControllerServiceHandler is an implementation of the baepo.api.v1.NodeControllerService
// service.
type NodeControllerServiceHandler interface {
	Connect(context.Context, *connect.BidiStream[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent]) error
}

// NewNodeControllerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeControllerServiceHandler(svc NodeControllerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeControllerServiceMethods := v1.File_baepo_api_v1_node_controller_proto.Services().ByName("NodeControllerService").Methods()
	nodeControllerServiceConnectHandler := connect.NewBidiStreamHandler(
		NodeControllerServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(nodeControllerServiceMethods.ByName("Connect")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.api.v1.NodeControllerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeControllerServiceConnectProcedure:
			nodeControllerServiceConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeControllerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeControllerServiceHandler struct{}

func (UnimplementedNodeControllerServiceHandler) Connect(context.Context, *connect.BidiStream[v1.NodeConnectClientEvent, v1.NodeConnectServerEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.NodeControllerService.Connect is not implemented"))
}
