// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/api/v1/container.proto

package apiv1pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ContainerServiceName is the fully-qualified name of the ContainerService service.
	ContainerServiceName = "baepo.api.v1.ContainerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContainerServiceListProcedure is the fully-qualified name of the ContainerService's List RPC.
	ContainerServiceListProcedure = "/baepo.api.v1.ContainerService/List"
	// ContainerServiceFindByIdProcedure is the fully-qualified name of the ContainerService's FindById
	// RPC.
	ContainerServiceFindByIdProcedure = "/baepo.api.v1.ContainerService/FindById"
	// ContainerServiceLogsProcedure is the fully-qualified name of the ContainerService's Logs RPC.
	ContainerServiceLogsProcedure = "/baepo.api.v1.ContainerService/Logs"
)

// ContainerServiceClient is a client for the baepo.api.v1.ContainerService service.
type ContainerServiceClient interface {
	List(context.Context, *connect.Request[v1.ContainerListRequest]) (*connect.Response[v1.ContainerListResponse], error)
	FindById(context.Context, *connect.Request[v1.ContainerFindByIdRequest]) (*connect.Response[v1.ContainerFindByIdResponse], error)
	Logs(context.Context, *connect.Request[v1.ContainerLogsRequest]) (*connect.ServerStreamForClient[v1.ContainerLogsResponse], error)
}

// NewContainerServiceClient constructs a client for the baepo.api.v1.ContainerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContainerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContainerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	containerServiceMethods := v1.File_baepo_api_v1_container_proto.Services().ByName("ContainerService").Methods()
	return &containerServiceClient{
		list: connect.NewClient[v1.ContainerListRequest, v1.ContainerListResponse](
			httpClient,
			baseURL+ContainerServiceListProcedure,
			connect.WithSchema(containerServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		findById: connect.NewClient[v1.ContainerFindByIdRequest, v1.ContainerFindByIdResponse](
			httpClient,
			baseURL+ContainerServiceFindByIdProcedure,
			connect.WithSchema(containerServiceMethods.ByName("FindById")),
			connect.WithClientOptions(opts...),
		),
		logs: connect.NewClient[v1.ContainerLogsRequest, v1.ContainerLogsResponse](
			httpClient,
			baseURL+ContainerServiceLogsProcedure,
			connect.WithSchema(containerServiceMethods.ByName("Logs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// containerServiceClient implements ContainerServiceClient.
type containerServiceClient struct {
	list     *connect.Client[v1.ContainerListRequest, v1.ContainerListResponse]
	findById *connect.Client[v1.ContainerFindByIdRequest, v1.ContainerFindByIdResponse]
	logs     *connect.Client[v1.ContainerLogsRequest, v1.ContainerLogsResponse]
}

// List calls baepo.api.v1.ContainerService.List.
func (c *containerServiceClient) List(ctx context.Context, req *connect.Request[v1.ContainerListRequest]) (*connect.Response[v1.ContainerListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// FindById calls baepo.api.v1.ContainerService.FindById.
func (c *containerServiceClient) FindById(ctx context.Context, req *connect.Request[v1.ContainerFindByIdRequest]) (*connect.Response[v1.ContainerFindByIdResponse], error) {
	return c.findById.CallUnary(ctx, req)
}

// Logs calls baepo.api.v1.ContainerService.Logs.
func (c *containerServiceClient) Logs(ctx context.Context, req *connect.Request[v1.ContainerLogsRequest]) (*connect.ServerStreamForClient[v1.ContainerLogsResponse], error) {
	return c.logs.CallServerStream(ctx, req)
}

// ContainerServiceHandler is an implementation of the baepo.api.v1.ContainerService service.
type ContainerServiceHandler interface {
	List(context.Context, *connect.Request[v1.ContainerListRequest]) (*connect.Response[v1.ContainerListResponse], error)
	FindById(context.Context, *connect.Request[v1.ContainerFindByIdRequest]) (*connect.Response[v1.ContainerFindByIdResponse], error)
	Logs(context.Context, *connect.Request[v1.ContainerLogsRequest], *connect.ServerStream[v1.ContainerLogsResponse]) error
}

// NewContainerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContainerServiceHandler(svc ContainerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	containerServiceMethods := v1.File_baepo_api_v1_container_proto.Services().ByName("ContainerService").Methods()
	containerServiceListHandler := connect.NewUnaryHandler(
		ContainerServiceListProcedure,
		svc.List,
		connect.WithSchema(containerServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	containerServiceFindByIdHandler := connect.NewUnaryHandler(
		ContainerServiceFindByIdProcedure,
		svc.FindById,
		connect.WithSchema(containerServiceMethods.ByName("FindById")),
		connect.WithHandlerOptions(opts...),
	)
	containerServiceLogsHandler := connect.NewServerStreamHandler(
		ContainerServiceLogsProcedure,
		svc.Logs,
		connect.WithSchema(containerServiceMethods.ByName("Logs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.api.v1.ContainerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContainerServiceListProcedure:
			containerServiceListHandler.ServeHTTP(w, r)
		case ContainerServiceFindByIdProcedure:
			containerServiceFindByIdHandler.ServeHTTP(w, r)
		case ContainerServiceLogsProcedure:
			containerServiceLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContainerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedContainerServiceHandler struct{}

func (UnimplementedContainerServiceHandler) List(context.Context, *connect.Request[v1.ContainerListRequest]) (*connect.Response[v1.ContainerListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ContainerService.List is not implemented"))
}

func (UnimplementedContainerServiceHandler) FindById(context.Context, *connect.Request[v1.ContainerFindByIdRequest]) (*connect.Response[v1.ContainerFindByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ContainerService.FindById is not implemented"))
}

func (UnimplementedContainerServiceHandler) Logs(context.Context, *connect.Request[v1.ContainerLogsRequest], *connect.ServerStream[v1.ContainerLogsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ContainerService.Logs is not implemented"))
}
