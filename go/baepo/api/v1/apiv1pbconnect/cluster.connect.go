// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baepo/api/v1/cluster.proto

package apiv1pbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baepo-cloud/baepo-proto/go/baepo/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "baepo.api.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceListProcedure is the fully-qualified name of the ClusterService's List RPC.
	ClusterServiceListProcedure = "/baepo.api.v1.ClusterService/List"
	// ClusterServiceCreateProcedure is the fully-qualified name of the ClusterService's Create RPC.
	ClusterServiceCreateProcedure = "/baepo.api.v1.ClusterService/Create"
	// ClusterServiceDeleteProcedure is the fully-qualified name of the ClusterService's Delete RPC.
	ClusterServiceDeleteProcedure = "/baepo.api.v1.ClusterService/Delete"
)

// ClusterServiceClient is a client for the baepo.api.v1.ClusterService service.
type ClusterServiceClient interface {
	List(context.Context, *connect.Request[v1.ClusterListRequest]) (*connect.Response[v1.ClusterListResponse], error)
	Create(context.Context, *connect.Request[v1.ClusterCreateRequest]) (*connect.Response[v1.ClusterCreateResponse], error)
	Delete(context.Context, *connect.Request[v1.ClusterDeleteRequest]) (*connect.Response[v1.ClusterDeleteResponse], error)
}

// NewClusterServiceClient constructs a client for the baepo.api.v1.ClusterService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := v1.File_baepo_api_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		list: connect.NewClient[v1.ClusterListRequest, v1.ClusterListResponse](
			httpClient,
			baseURL+ClusterServiceListProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.ClusterCreateRequest, v1.ClusterCreateResponse](
			httpClient,
			baseURL+ClusterServiceCreateProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.ClusterDeleteRequest, v1.ClusterDeleteResponse](
			httpClient,
			baseURL+ClusterServiceDeleteProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	list   *connect.Client[v1.ClusterListRequest, v1.ClusterListResponse]
	create *connect.Client[v1.ClusterCreateRequest, v1.ClusterCreateResponse]
	delete *connect.Client[v1.ClusterDeleteRequest, v1.ClusterDeleteResponse]
}

// List calls baepo.api.v1.ClusterService.List.
func (c *clusterServiceClient) List(ctx context.Context, req *connect.Request[v1.ClusterListRequest]) (*connect.Response[v1.ClusterListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Create calls baepo.api.v1.ClusterService.Create.
func (c *clusterServiceClient) Create(ctx context.Context, req *connect.Request[v1.ClusterCreateRequest]) (*connect.Response[v1.ClusterCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls baepo.api.v1.ClusterService.Delete.
func (c *clusterServiceClient) Delete(ctx context.Context, req *connect.Request[v1.ClusterDeleteRequest]) (*connect.Response[v1.ClusterDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the baepo.api.v1.ClusterService service.
type ClusterServiceHandler interface {
	List(context.Context, *connect.Request[v1.ClusterListRequest]) (*connect.Response[v1.ClusterListResponse], error)
	Create(context.Context, *connect.Request[v1.ClusterCreateRequest]) (*connect.Response[v1.ClusterCreateResponse], error)
	Delete(context.Context, *connect.Request[v1.ClusterDeleteRequest]) (*connect.Response[v1.ClusterDeleteResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := v1.File_baepo_api_v1_cluster_proto.Services().ByName("ClusterService").Methods()
	clusterServiceListHandler := connect.NewUnaryHandler(
		ClusterServiceListProcedure,
		svc.List,
		connect.WithSchema(clusterServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceCreateHandler := connect.NewUnaryHandler(
		ClusterServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(clusterServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDeleteHandler := connect.NewUnaryHandler(
		ClusterServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(clusterServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/baepo.api.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceListProcedure:
			clusterServiceListHandler.ServeHTTP(w, r)
		case ClusterServiceCreateProcedure:
			clusterServiceCreateHandler.ServeHTTP(w, r)
		case ClusterServiceDeleteProcedure:
			clusterServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) List(context.Context, *connect.Request[v1.ClusterListRequest]) (*connect.Response[v1.ClusterListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ClusterService.List is not implemented"))
}

func (UnimplementedClusterServiceHandler) Create(context.Context, *connect.Request[v1.ClusterCreateRequest]) (*connect.Response[v1.ClusterCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ClusterService.Create is not implemented"))
}

func (UnimplementedClusterServiceHandler) Delete(context.Context, *connect.Request[v1.ClusterDeleteRequest]) (*connect.Response[v1.ClusterDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("baepo.api.v1.ClusterService.Delete is not implemented"))
}
